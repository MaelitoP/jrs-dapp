var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { Connector } from '@web3-react/types';
export class NoMetaMaskError extends Error {
    constructor() {
        super('MetaMask not installed');
        this.name = NoMetaMaskError.name;
        Object.setPrototypeOf(this, NoMetaMaskError.prototype);
    }
}
function parseChainId(chainId) {
    return Number.parseInt(chainId, 16);
}
export class MetaMask extends Connector {
    constructor(actions, connectEagerly = true, options) {
        super(actions);
        this.options = options;
        if (connectEagerly) {
            this.eagerConnection = this.initialize(true);
        }
    }
    initialize(connectEagerly) {
        return __awaiter(this, void 0, void 0, function* () {
            let cancelActivation;
            if (connectEagerly) {
                cancelActivation = this.actions.startActivation();
            }
            return import('@metamask/detect-provider')
                .then((m) => m.default(this.options))
                .then((provider) => {
                var _a;
                this.provider = (_a = provider) !== null && _a !== void 0 ? _a : undefined;
                if (this.provider) {
                    this.provider.on('connect', ({ chainId }) => {
                        this.actions.update({ chainId: parseChainId(chainId) });
                    });
                    this.provider.on('disconnect', (error) => {
                        this.actions.reportError(error);
                    });
                    this.provider.on('chainChanged', (chainId) => {
                        this.actions.update({ chainId: parseChainId(chainId) });
                    });
                    this.provider.on('accountsChanged', (accounts) => {
                        this.actions.update({ accounts });
                    });
                    if (connectEagerly) {
                        return Promise.all([
                            this.provider.request({ method: 'eth_chainId' }),
                            this.provider.request({ method: 'eth_accounts' }),
                        ])
                            .then(([chainId, accounts]) => {
                            if (accounts.length) {
                                this.actions.update({ chainId: parseChainId(chainId), accounts });
                            }
                            else {
                                throw new Error('No accounts returned');
                            }
                        })
                            .catch((error) => {
                            console.debug('Could not connect eagerly', error);
                            cancelActivation();
                        });
                    }
                }
                else if (connectEagerly) {
                    cancelActivation();
                }
            });
        });
    }
    activate(desiredChainIdOrChainParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const desiredChainId = typeof desiredChainIdOrChainParameters === 'number'
                ? desiredChainIdOrChainParameters
                : desiredChainIdOrChainParameters === null || desiredChainIdOrChainParameters === void 0 ? void 0 : desiredChainIdOrChainParameters.chainId;
            this.actions.startActivation();
            if (!this.eagerConnection) {
                this.eagerConnection = this.initialize(false);
            }
            yield this.eagerConnection;
            if (!this.provider) {
                return this.actions.reportError(new NoMetaMaskError());
            }
            return Promise.all([
                this.provider.request({ method: 'eth_chainId' }),
                this.provider.request({ method: 'eth_requestAccounts' }),
            ])
                .then(([chainId, accounts]) => {
                const receivedChainId = parseChainId(chainId);
                // if there's no desired chain, or it's equal to the received, update
                if (!desiredChainId || receivedChainId === desiredChainId) {
                    return this.actions.update({ chainId: receivedChainId, accounts });
                }
                // if we're here, we can try to switch networks
                const desiredChainIdHex = `0x${desiredChainId.toString(16)}`;
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                return this.provider.request({
                    method: 'wallet_switchEthereumChain',
                    params: [{ chainId: desiredChainIdHex }],
                })
                    .catch((error) => {
                    if (error.code === 4902 && typeof desiredChainIdOrChainParameters !== 'number') {
                        // if we're here, we can try to add a new network
                        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                        return this.provider.request({
                            method: 'wallet_addEthereumChain',
                            params: [Object.assign(Object.assign({}, desiredChainIdOrChainParameters), { chainId: desiredChainIdHex })],
                        });
                    }
                    else {
                        throw error;
                    }
                })
                    .then(() => this.activate(desiredChainId));
            })
                .catch((error) => {
                this.actions.reportError(error);
            });
        });
    }
}
